---
layout: post
title:      "  My Sinatra Project "
date:       2020-10-10 22:50:25 -0400
permalink:  my_sinatra_project
---



  When we started the Sinatra curriculum, it was a little overwhelming at first.  I started to understand it a little more as we progressed, but as the project grew near, I started to become pretty nervous.  I began to think of what I wanted to do for my project.  Once I had the idea, I started to figure out my has_many and belongs_to relationships.   After I mapped everything out, I figured it was time to make my tables.  First, I made a table for artists, which included a name, an email, and a password.  Then I built another table for clients, which included a name, email, tattoo, and artist_id so I could relate my clients with a certain artist.  After my tables were migrated to the database, I figured it was time to make some models. 

  I made a model for artists as well as clients and had both of them inheriting from ActiveRecord base.  I added my has_many relationship to artists because an artist has many clients.  Then I added my belongs_to relationship to the client's class because clients belong to an artist. 

  Using rake console, I created some artists and clients to use them as seed data to make sure my code was working properly.  I knew I was going to need multiple controllers.  So I went ahead and made one for clients and artists and an application controller.  I started with the application controller and had it inherit from Sinatra Base.  I set my configure to enable sessions because I know I'm going to use it later.  

  I also set the session secret to password digest so I can use the gem Bcrypt to encrypt passwords when created.  After this, I set up both the client and artist controllers and had both inheriting from the application contoller.  I then when to config.ru file and mounted all of the controllers.  So after all of that, now began the fun stuff. 
I set up a get request in application controller that rendered a view file for my hompage.  So I knew I was going to need a log in and a sign up for new users who didn't have an account.  
 
   So I decided I was going to build a form for the log in with a post request, but I decided I would just make a link for the sign up, which would have its own page to make a new account.  I put the form inside a table to give it structure and put a welcome message in h1 tags.  So with the view page done, I went back to application controller to set up my post request.  Iniside the post request, I used Ruby to find the user's email that was submitted and in the params hash.  I then used an "if" statement to check to see if it was the right email and used the authenticate method to check the password.  If everything is right, then it is redirected to the artists get request; and, if not, it redirects to an error get request. So then I figured I would get my sign-up page working.  So I can test the functionality of my sign-up and log-in process. 
	 
	   So first I made a get request called sign up, which rendered my sign-up view file.  I then added that route to my link tag that I had in my homepage view file.  So when you click the link, it will hit the get request that I just made to send it to the sign-up page.  My sign-up page was a form that I put inside a table to give it structure.  It had entries for name, password, and email.  With the view set up, I went back to application controller and made a post request for sign up.  I gave it validation.  So if you don't fill in a section, it redirects you back to the page until it's filled out properly.  
I then built a get request for the error page which rendered an error view file, which had a link back to the hompage.  I then built a helper method that checks to see if the user is the current user.  After this, I felt my application controller was done.  

    So I move onto the artist controller to build a get request that responds to my log-in post request.  So in my artist get request I set an instace variable to an array that has all the clients in it.  I render it to an index view file so I can list all the current users' clients.  So inside the view file, I used Ruby inside the html and iterated over the client's array and checked to make sure that the client's foreign key matches the current user.  Then I used a ul tag to list out their name, email, and current tattoo.  

  I then set up a form that would send a get request to the client's controller that would render a view file to create a new client.  I also made a link to log out.  I went back to my application controller to add a get request that clears the session hash and redirects to the homepage.  After that, I set up my get request in the client controller that renders a view file which would be able to create a new client.  

  I then set up another form that would take in the new client information and send a post request.  In the client controller, I set up a post request that validates all items are there and then redirects back to the artist's index page where the new client is listed.  So I had my logout and create-new-artist links done.  Now I needed a show page to show an individual client's information and give the user an opiton to update or delete that client.  So I went back to my artist's index page and, in my iteration, I set the name to be a link to the show page.  After this, I built my show page, which has a link that sends you to another page where you can fill out the form to update your client.  In my client controller, I then added a get request that renders the show page.  I then built the view file, which contained the form that would update the client. I set up the form to make a patch request.  I knew that I needed to mount the Rack::MethodOverdrive to allow patch and delete request.  After this, I made my patch request in the client controller that updates and saves the data entered.  So all I needed now was a way to delete a client.  So I went back to my show page and built a form to send a delete request to delete the client.  Once this was complete, I went back to my client controller and made my delete request, which checks to make sure the current user ID and client artist ID are the same.  This way a user is the only one that can delete their clients.  Once this was all complete, I was on cloud nine.  I was so excited that I understood what I was doing and everything worked.  At first I was super nervous about this project, but as soon as I started,I actually had a lot of fun with this project . 
